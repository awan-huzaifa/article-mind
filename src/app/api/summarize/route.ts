import { NextResponse } from 'next/server';
import Groq from "groq-sdk";

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

const getPromptForType = (type: string, content: string) => {
  const prompts = {
    concise: `You are given html content as article. Please provide a single, clear summary paragraph of this article. Focus on the main points and keep it concise and in your output dont mention that you were given html content: ${content}`,
    
    bullet: `You are given html content as article. Please provide 5-7 key bullet points summarizing the main takeaways from this article and in your output dont mention that you were given html content: ${content}`,
    
    eli5: `You are given html content as article. Please explain this article in simple terms, as if explaining it to a 5-year-old. Use basic language and avoid complex terms and in your output dont mention that you were given html content: ${content}`,
    
    executive: `You are given html content as article. Please provide an executive summary of this article. Focus on high-level insights, key findings, and business implications and in your output dont mention that you were given html content: ${content}`,
    
    detailed: `You are given html content as article. Please provide a detailed breakdown of this article with the following structure:
    1. Introduction: Main topic and context
    2. Body: Key points and supporting details
    3. Conclusion: Main takeaways and implications
    In your output dont mention that you were given html content
    Article: ${content}`,
    
    proscons: `You are given html content as article. Please analyze this article and provide a list of pros and cons, advantages and disadvantages, or positive and negative aspects and in your output dont mention that you were given html content: ${content}`,
    
    facts: `You are given html content as article. Please extract only the key facts, statistics, and numerical data that is related to this article. Focus on verifiable information and in your output dont mention that you were given html content: ${content}`
  };

  return prompts[type as keyof typeof prompts] || prompts.concise;
};

export async function POST(req: Request) {
  try {
    console.log("Starting article summarization process...");
    
    const { url, summaryType } = await req.json();
    console.log("Received request for URL:", url);
    console.log("Summary type:", summaryType);

    // Validate URL
    if (!url) {
      throw new Error('URL is required');
    }

    try {
      // Fetch the article content with browser-like headers
      console.log("Fetching article content...");
      const response = await fetch(url, {
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
          "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
          "Accept-Language": "en-US,en;q=0.5",
          "Connection": "keep-alive",
          "Upgrade-Insecure-Requests": "1"
        }
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch article: ${response.status} ${response.statusText}`);
      }

      const html = await response.text();
      console.log("Successfully fetched article content");

      // Validate Groq API key
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY is not configured');
      }
      console.log("Groq API Key is configured");

      // Get summary using Groq
      console.log("Sending request to Groq API...");
      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "You are a helpful assistant that summarizes articles in various formats. Provide clear, accurate, and well-structured summaries."
          },
          {
            role: "user",
            content: getPromptForType(summaryType, html)
          }
        ],
        model: "llama-3.3-70b-versatile",
        temperature: 0.7,
        max_tokens: 1000
      });

      console.log("Received response from Groq API");

      if (!completion.choices?.[0]?.message?.content) {
        throw new Error('No summary generated by Groq API');
      }

      const summary = completion.choices[0].message.content;
      console.log("Successfully generated summary");

      return NextResponse.json({ summary });

    } catch (fetchError) {
      console.error("Error fetching article:", fetchError);
      throw new Error(`Failed to fetch article: ${fetchError.message}`);
    }

  } catch (error) {
    console.error("Error in summarization process:", error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to summarize article',
        details: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
} 
